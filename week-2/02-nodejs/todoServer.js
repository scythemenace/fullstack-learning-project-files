/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, "description": "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const fs = require('fs');
const path = require('path')
const bodyParser = require('body-parser');
const port = 3000;
const app = express();
const pathName = path.join(__dirname, 'files', 'todo.txt');

const readFileForData = () => {
  return new Promise((resolve, reject) => {
    fs.readFile(pathName, 'utf-8', (err, data) => {
      resolve(data);
    })
  })
}

readFileForData().then(val => {
  let tasks = {}; // To track tasks
  let id = {}; //To track for repeating id's

  if (val != "") {
    tasks = JSON.parse(val);
    for (obj in tasks) {
        id[obj] = ""
    }
  }
  let arr = [tasks, id];
  return arr
}).then((arr) => {
    //Function to get an IDs
    let tasks_db = arr[0];
    let id_db = arr[1];
    const randomIdGen = (id_database) => {
      let max = Object.keys(id_database).length;
      let randomId = Math.floor(Math.random() * max) + 1;
      //console.log(`randomId = ${randomId}`);
      //console.log(`checking if it results in undef: ${id_database[randomId]}`);
      while (id_database[randomId] !== undefined) {
          randomId = Math.floor(Math.random() * max) + 2;
        //console.log(`new random_id = ${randomId}`);
      }
      //console.log(`final random_id = ${randomId}`);
      return randomId;
    }

    app.use(bodyParser.json());

    app.get('/todos', (req, res) => {
      let arr = [];
      for (obj in tasks_db) {
        //console.log(`This is the key of the object: ${obj}`)
        let temp_obj = {}
        for (sub_keys in tasks_db[obj]) {
          //console.log(`This is the sub_key of the object: ${sub_keys}`);
          temp_obj[sub_keys] = tasks_db[obj][sub_keys];
        }
        //console.log(`This is the final object: ${temp_obj}`)
        arr.push(temp_obj);
      }

      console.log(tasks_db);
      res.status(200).json(
        arr)
    })

    app.get('/todos/:id', (req, res) => {
      let id = req.params.id;
      let task = tasks_db[id];
      if (tasks_db[id] == undefined) {
        res.status(404).send()
      }
      res.status(200).json(task)
    })

    app.post('/todos', (req, res) => {
      const title = req.body.title;
      const description = req.body.description;
      const random_id = randomIdGen(id_db);
      id_db[random_id] = "";
      tasks_db[random_id] = {
        "id": random_id,
        "title": title,
        "description": description
      };
      text = JSON.stringify(tasks_db)
      fs.writeFile(pathName, text, 'utf-8', () => {
        console.log(text);
        console.log("file written successfully");
      });
      res.status(201).json({
        "id": random_id,
        "title": title,
        "description": description,
      })
    })

    app.put('/todos/:updateId', (req, res) => {
      let id_of_new_item = req.params.updateId;
      let title = req.body.title;
      let description = req.body.description
      let new_item = {}
      new_item["id"] = id_of_new_item;
      new_item["title"] = title;
      new_item["description"] = description;
      if (tasks_db[id_of_new_item] == undefined) {
        res.status(404).send()
      }
      tasks_db[id_of_new_item] = new_item;
      text = JSON.stringify(tasks_db)
      console.log(text)
      fs.writeFile(pathName, text, 'utf-8', () => {
        console.log(text);
        console.log("file written successfully");
      });
      res.status(200).json(tasks_db[id_of_new_item])
    })

    app.delete('/todos/:delId', (req, res) => {
      let keyToDelete = req.params.delId;
      if (tasks_db[keyToDelete] == undefined) {
        res.status(404).send()
      }
      delete tasks_db[keyToDelete];
      delete id_db[keyToDelete];
      text = JSON.stringify(tasks_db)
      console.log(text)
      fs.writeFile(pathName, text, 'utf-8', () => {
        console.log(text);
        console.log("file written successfully");
      });
      res.status(200).send()
    })

    app.use((req, res, next) => {
      res.status(404).send('404 Not Found')
    })

    //Uncomment for self-testing
    app.listen(port);
})

module.exports = app;